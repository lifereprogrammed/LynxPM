// <auto-generated />
using LynxPMCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LynxPMCore.Migrations
{
    [DbContext(typeof(LynxPMContext))]
    [Migration("20180403034524_TaskTrackerModConditionGUID")]
    partial class TaskTrackerModConditionGUID
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LynxPMCore.Models.Area", b =>
                {
                    b.Property<Guid>("AreaID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AreaActive");

                    b.Property<int>("AreaAppearanceOrder");

                    b.Property<string>("AreaDescription");

                    b.Property<string>("AreaKMLFileURL");

                    b.Property<string>("AreaName")
                        .IsRequired();

                    b.HasKey("AreaID");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("LynxPMCore.Models.Condition", b =>
                {
                    b.Property<Guid>("ConditionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConditionDescription");

                    b.Property<string>("ConditionDisplayLetter");

                    b.Property<string>("ConditionName");

                    b.HasKey("ConditionID");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("LynxPMCore.Models.DueStatus", b =>
                {
                    b.Property<Guid>("DueStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DueStatusName")
                        .IsRequired();

                    b.Property<string>("DustStatusDescription");

                    b.HasKey("DueStatusID");

                    b.ToTable("DueStatuses");
                });

            modelBuilder.Entity("LynxPMCore.Models.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AreaID");

                    b.Property<bool>("EquipmentActive");

                    b.Property<int>("EquipmentAppearance");

                    b.Property<Guid>("EquipmentAreaID");

                    b.Property<string>("EquipmentDescription");

                    b.Property<string>("EquipmentName");

                    b.Property<string>("EquipmentPictureID");

                    b.Property<string>("EquipmentPictureURL");

                    b.HasKey("EquipmentID");

                    b.HasIndex("AreaID");

                    b.HasIndex("EquipmentAreaID");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("LynxPMCore.Models.EquipmentArea", b =>
                {
                    b.Property<Guid>("EquipmentAreaID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AreaID");

                    b.Property<bool>("EquipmentAreaActive");

                    b.Property<string>("EquipmentAreaAppearanceOrder");

                    b.Property<string>("EquipmentAreaDescription");

                    b.Property<string>("EquipmentAreaName")
                        .IsRequired();

                    b.HasKey("EquipmentAreaID");

                    b.HasIndex("AreaID");

                    b.ToTable("EquipmentAreas");
                });

            modelBuilder.Entity("LynxPMCore.Models.LTask", b =>
                {
                    b.Property<Guid>("LTaskID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EquipmentID");

                    b.Property<string>("LTaskDescription");

                    b.Property<string>("LTaskName")
                        .IsRequired();

                    b.Property<Guid>("TaskTypeID");

                    b.Property<Guid>("TermID");

                    b.HasKey("LTaskID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("TaskTypeID");

                    b.HasIndex("TermID");

                    b.ToTable("LTasks");
                });

            modelBuilder.Entity("LynxPMCore.Models.TaskTracker", b =>
                {
                    b.Property<Guid>("TaskTrackerID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConditionID");

                    b.Property<Guid>("LTaskID");

                    b.Property<string>("TaskRecordUserIP");

                    b.Property<string>("TaskTrackerComments");

                    b.Property<string>("TaskTrackerCompletionDate");

                    b.Property<string>("TaskTrackerDateStamp");

                    b.Property<int>("TaskTrackerDaystoComplete");

                    b.Property<string>("TaskTrackerExpectedCompletionDate");

                    b.Property<string>("TaskTrackerPreviousCompletionDate");

                    b.Property<string>("TaskTrackerRecordUser");

                    b.Property<Guid>("TaskTrackerSessionID");

                    b.Property<Guid>("TaskTrackerStageID");

                    b.HasKey("TaskTrackerID");

                    b.HasIndex("ConditionID");

                    b.HasIndex("LTaskID");

                    b.HasIndex("TaskTrackerStageID");

                    b.ToTable("TaskTrackers");
                });

            modelBuilder.Entity("LynxPMCore.Models.TaskTrackerStage", b =>
                {
                    b.Property<Guid>("TaskTrackerStageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TaskTrackerStageDescription");

                    b.Property<string>("TaskTrackerStageName");

                    b.HasKey("TaskTrackerStageID");

                    b.ToTable("TaskTrackerStages");
                });

            modelBuilder.Entity("LynxPMCore.Models.TaskType", b =>
                {
                    b.Property<Guid>("TaskTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TaskTypeDescription");

                    b.Property<string>("TaskTypeDisplayLetter")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("TaskTypeName")
                        .IsRequired();

                    b.HasKey("TaskTypeID");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("LynxPMCore.Models.Term", b =>
                {
                    b.Property<Guid>("TermID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TermDays");

                    b.Property<string>("TermDescription");

                    b.Property<int>("TermLeadTime");

                    b.Property<string>("TermName")
                        .IsRequired();

                    b.Property<string>("TermShortName")
                        .HasMaxLength(2);

                    b.HasKey("TermID");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("LynxPMCore.Models.Equipment", b =>
                {
                    b.HasOne("LynxPMCore.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID");

                    b.HasOne("LynxPMCore.Models.EquipmentArea", "EquipmentArea")
                        .WithMany()
                        .HasForeignKey("EquipmentAreaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LynxPMCore.Models.EquipmentArea", b =>
                {
                    b.HasOne("LynxPMCore.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LynxPMCore.Models.LTask", b =>
                {
                    b.HasOne("LynxPMCore.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LynxPMCore.Models.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LynxPMCore.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LynxPMCore.Models.TaskTracker", b =>
                {
                    b.HasOne("LynxPMCore.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionID");

                    b.HasOne("LynxPMCore.Models.LTask", "LTask")
                        .WithMany()
                        .HasForeignKey("LTaskID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LynxPMCore.Models.TaskTrackerStage", "TaskTrackerStage")
                        .WithMany()
                        .HasForeignKey("TaskTrackerStageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
